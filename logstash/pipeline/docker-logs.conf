input {
  http {
    port => 1985
    codec => "json"
  }
}

filter {
  mutate { add_field => {"logs_token" => "${DOCKER_LOGS_TOKEN}" }}
  mutate { add_field => {"request_uri" => "%{[headers][request_uri]}" }}
  urldecode { field => "request_uri" }
  mutate { gsub => ["request_uri","\/[a-z\-]+\?","" ] }    
  kv {
      target => "cs_request_uri"
      allow_duplicate_values => false
      include_brackets => false
      field_split => "&"
      source => "request_uri"
  }

  mutate { 
    remove_field => ["request_uri", "[headers][request_uri]", "[headers][http_cache_control]", 
                     "[headers][http_version]", "[headers][http_connection]", "[headers][http_accept_encoding]"]
  }
  
 if [cs_request_uri][token] != [logs_token] or [message] =~ /^polling/ {     
     drop {}
  }

  # default all messages to this index
  mutate { add_field => {"[index_suffix]" => "client-app-errors" }}
  if [cs_request_uri][type] == "ch-records" {
    mutate { replace => {"[index_suffix]" => "clearing-house-records" }}    
  }
  else if [cs_request_uri][type] == "docker" {
    mutate { replace => {"[index_suffix]" => "docker-logs" }}
  }

  if [cs_request_uri][type] == "ch-records" {
    ruby {
      code => "event.set('document_id', event.get('id'))"
    }
  }
  else{
    uuid {
      target    => "document_id"
    }
  }

  mutate {       
       remove_field => ["[cs_request_uri][docker-logs]", "[cs_request_uri][token]", "logs_token"]
       convert => {
            "time" => "string"
        }
        rename => { "type" => "logtype" }
        add_field => {
            "type" => "_doc"
        }
  }


  # ruby {
  #   code => "event.set('[is_qs_empty]', 'true') if event.get('[cs_request_uri]').length <= 2"
  # }

  # if [is_cs_empty] {
  #     mutate {
  #         remove_field => ["cs_request_uri"]
  #     }
  # }
  # mutate {
  #   remove_field => ["is_qs_empty"]
  # }

}
output {
  elasticsearch {
    index => ["scbd-%{[index_suffix]}"]
    hosts => "elasticsearch:9200"
    template => "/etc/logstash/templates/logstash-template.json"
    template_name => "template-docker-logs"
    document_id => "%{document_id}"
    user => "${LOGSTASH_ES_USER}"
    password => "${LOGSTASH_ES_PASSWORD}"
  }
  # stdout { codec => rubydebug }
}
